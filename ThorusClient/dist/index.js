/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Project.ts":
/*!************************!*\
  !*** ./src/Project.ts ***!
  \************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.Manager = void 0;\r\n    var Manager;\r\n    (function (Manager) {\r\n        let Project;\r\n        (function (Project) {\r\n            let Structure;\r\n            (function (Structure) {\r\n                class Data {\r\n                    constructor() {\r\n                        this.app = new App;\r\n                        this.css = new Css;\r\n                        this.lib = new Lib;\r\n                        this.workbench = new WorkBench;\r\n                    }\r\n                }\r\n                Structure.Data = Data;\r\n                class App {\r\n                }\r\n                Structure.App = App;\r\n                class Css {\r\n                }\r\n                Structure.Css = Css;\r\n                class Lib {\r\n                }\r\n                Structure.Lib = Lib;\r\n                class WorkBench {\r\n                    constructor() {\r\n                        this.app = {\r\n                            nodesBench: new NodeBench\r\n                        };\r\n                    }\r\n                    GetBenchByName(name) {\r\n                        return (name ? this[name] : console.error(\"bench name not correct\"));\r\n                    }\r\n                    SetBench(benchName, template) {\r\n                        this[benchName] = template;\r\n                    }\r\n                    GetAllBenchNames() {\r\n                        return Object.keys(this);\r\n                    }\r\n                    RemoveBench(benchName) {\r\n                        delete this[benchName];\r\n                    }\r\n                    GetAllNodesBench(benchName) {\r\n                        return this[benchName].nodesBench;\r\n                    }\r\n                    GetAllNodesBenchNames(benchName) {\r\n                        return Object.keys(this[benchName].nodesBench);\r\n                    }\r\n                    SetNodeBench(benchName, componentName, componentTemplate) {\r\n                        componentTemplate._id = this.SetNodeId();\r\n                        this[benchName].nodesBench[componentName] = componentTemplate;\r\n                        this[componentTemplate._id] = componentTemplate;\r\n                    }\r\n                    RemoveNodeBench(benchName, componentName) {\r\n                        const componentId = this[benchName][componentName].id;\r\n                        delete this[benchName][componentName];\r\n                        delete this[componentId];\r\n                    }\r\n                    SetNodeId() {\r\n                        let hash = 0;\r\n                        let keyString = String(Date.now());\r\n                        for (let charIndex = 0; charIndex < keyString.length; ++charIndex) {\r\n                            hash += keyString.charCodeAt(charIndex);\r\n                            hash += hash << 10;\r\n                            hash ^= hash >> 6;\r\n                        }\r\n                        hash += hash << 3;\r\n                        hash ^= hash >> 11;\r\n                        return (((hash + (hash << 15)) & 4294967295) >>> 0);\r\n                    }\r\n                }\r\n                Structure.WorkBench = WorkBench;\r\n                class NodeBench {\r\n                }\r\n                Structure.NodeBench = NodeBench;\r\n            })(Structure = Project.Structure || (Project.Structure = {}));\r\n            class Model {\r\n                constructor() {\r\n                    this.name = null;\r\n                    this.path = null;\r\n                    this.data = new Structure.Data;\r\n                }\r\n            }\r\n            Project.Model = Model;\r\n        })(Project = Manager.Project || (Manager.Project = {}));\r\n        class ProjectManager {\r\n            constructor() {\r\n                this.project = new Project.Model;\r\n            }\r\n            set Data(project) { this.project = project; }\r\n            get data() { return this.project.data; }\r\n            get app() { return this.data.app; }\r\n            get css() { return this.data.css; }\r\n            get lib() { return this.data.lib; }\r\n            get workBench() { return this.data.workbench; }\r\n            get GetBenchByName() { return function (name, _this = this) { return _this.workBench.GetBenchByName(name); }; }\r\n            get SetBench() { return function (benchName, template, _this = this) { return _this.workBench.SetBench(benchName, template); }; }\r\n            get GetAllBenchNames() { return function (_this = this) { return _this.workBench.GetAllBenchNames(); }; }\r\n            get RemoveBench() { return function (benchName, _this = this) { return _this.workBench.RemoveBench(benchName); }; }\r\n            get GetAllNodesBenchNames() { return function (benchName, _this = this) { return _this.workBench.GetAllNodesBenchNames(benchName); }; }\r\n            get SetNodeBench() { return function (benchName, componentName, componentTemplate, _this = this) { return _this.workBench.SetNodeBench(benchName, componentName, componentTemplate); }; }\r\n            get RemoveNodeBench() { return function (benchName, componentName, _this = this) { return _this.workBench.RemoveNodeBench(benchName, componentName); }; }\r\n        }\r\n        Manager.ProjectManager = ProjectManager;\r\n    })(Manager = exports.Manager || (exports.Manager = {}));\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://thorusclient/./src/Project.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Project */ \"./src/Project.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Project_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    exports.t = exports.Thorus = void 0;\r\n    class Thorus {\r\n        constructor() {\r\n            this.manager = new Project_1.Manager.ProjectManager;\r\n        }\r\n        get File() {\r\n            return new class File {\r\n                get ipcRenderer() {\r\n                    const w = window;\r\n                    return w.ipcRenderer;\r\n                }\r\n                constructor() { }\r\n                NewProject() { this.ipcRenderer.send('client-<Files>-new-project', null); }\r\n                OpenProject() { this.ipcRenderer.send('client-<Files>-open-project', null); }\r\n                SaveProject() { this.ipcRenderer.send('client-<Files>-save-project', null); }\r\n                SaveProjectAs() { this.ipcRenderer.send('client-<Files>-save-project-as', null); }\r\n                ExportAll() { this.ipcRenderer.send('client-<Files>-export-all', null); }\r\n                ExportHTML() { this.ipcRenderer.send('client-<Files>-export-html', null); }\r\n                ExportCSS() { this.ipcRenderer.send('client-<Files>-export-css', null); }\r\n                Exit() { }\r\n            }();\r\n        }\r\n        get Edit() {\r\n            return new class Edit {\r\n                constructor() { }\r\n                get Libraries() {\r\n                    return new class {\r\n                        constructor() { }\r\n                        get ipcRenderer() {\r\n                            const w = window;\r\n                            return w.ipcRenderer;\r\n                        }\r\n                        OpenManager() { this.ipcRenderer.send('client-<Edit>-open-libraries-manager', null); }\r\n                        AddExternal() { this.ipcRenderer.send('client-<Edit>-add-libraries-external', null); }\r\n                        AddLocal() { this.ipcRenderer.send('client-<Edit>-add-libraries-local', null); }\r\n                    }();\r\n                }\r\n            }();\r\n        }\r\n        get app() {\r\n            const w = window;\r\n            const t = w.thorium;\r\n            return t.app;\r\n        }\r\n        get WorkGroupView() {\r\n            const w = window;\r\n            const t = w.thorium;\r\n            return new class WorkGroupView {\r\n                constructor(element) {\r\n                    this.element = element;\r\n                }\r\n            }(t.app.WorkGroupView);\r\n        }\r\n        get GroupView() {\r\n            const w = window;\r\n            const t = w.thorium;\r\n            return new class GroupView {\r\n                constructor(element) {\r\n                    this.element = element;\r\n                }\r\n                OpenView(viewName) { return this.element.OpenView(viewName); }\r\n                OpenCodeView(viewName, option) { return this.element.OpenCodeView(viewName, option); }\r\n                CloseView(viewName) { return this.element.CloseView(viewName); }\r\n                CloseAllViews() { return this.element.CloseAllViews(); }\r\n                ShowView(viewName) { return this.element.ShowView(viewName); }\r\n                GetActiveView() { return this.element.getActiveView(); }\r\n                GetViewByName(viewName) { return this.element.getViewByName(viewName); }\r\n                TurnViewActive() { return this.element.activeView(); }\r\n                TurnViewByNameActive(viewName) { return this.element.activeViewByName(viewName); }\r\n                TurnViewUnActive() { return this.element.unactiveView(); }\r\n            }(t.app.WorkGroupView.GroupView);\r\n        }\r\n        get GroupMenu() {\r\n            const w = window;\r\n            const t = w.thorium;\r\n            return t.app.WorkGroupView.GroupView.GroupMenu;\r\n        }\r\n        get Menu() {\r\n            const w = window;\r\n            const t = w.thorium;\r\n            return new class Menu {\r\n                constructor(element) {\r\n                    this.element = t.app.menu;\r\n                    this.element = element;\r\n                }\r\n                Open() { if (!this.element.isActive)\r\n                    this.element.turnActive(); }\r\n                Close() {\r\n                    if (!Array.from(this.element.children, function (item, i) {\r\n                        return item.isActive;\r\n                    }).includes(true))\r\n                        this.element.turnActive();\r\n                }\r\n                OpenSection(sectionName) {\r\n                    try {\r\n                        const section = this.element.querySelectorAll(`section[name=${sectionName}]`)[0];\r\n                        if (!section)\r\n                            throw new Error('Wrong section name');\r\n                        this.Open();\r\n                        if (!section.isActive)\r\n                            section.turnActive();\r\n                    }\r\n                    catch (err) {\r\n                        console.warn(err);\r\n                    }\r\n                }\r\n                CloseSection(sectionName) {\r\n                    try {\r\n                        const section = this.element.querySelectorAll(`section[name=${sectionName}]`)[0];\r\n                        if (!section)\r\n                            throw new Error('Wrong section name');\r\n                        this.Close();\r\n                        if (section.isActive)\r\n                            section.turnActive();\r\n                    }\r\n                    catch (err) {\r\n                        console.warn(err);\r\n                    }\r\n                }\r\n            }(t.app.menu);\r\n        }\r\n        get View() {\r\n            return null;\r\n        }\r\n    }\r\n    exports.Thorus = Thorus;\r\n    const w = window;\r\n    w.thorus = new Thorus();\r\n    exports.t = w.thorus;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://thorusclient/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;